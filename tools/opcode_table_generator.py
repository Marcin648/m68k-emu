import sys

opcode_table = [
    #(mask, value, fnc_name)
    (0b1111111111111111, 0b0000000000111100, "OriToCCR"),
    (0b1111111111111111, 0b0000000001111100, "OriToSR"),
    (0b1111111111111111, 0b0000001000111100, "AndiToCCR"),
    (0b1111111111111111, 0b0000001001111100, "AndiToSR"),
    (0b1111111111111111, 0b0100101011111100, "Illegal"),
    (0b1111111111111111, 0b0100111001110000, "Reset"),
    (0b1111111111111111, 0b0100111001110001, "Nop"),
    (0b1111111111111111, 0b0100111001110010, "Stop"),
    (0b1111111111111111, 0b0100111001110011, "Rte"),
    (0b1111111111111111, 0b0100111001110101, "Rts"),
    (0b1111111111111111, 0b0100111001110110, "Trapv"),
    (0b1111111111111111, 0b0100111001110111, "Rtr"),
    (0b1111111111111000, 0b0100100001000000, "Swap"),
    (0b1111111111111000, 0b0100111001010000, "Link"),
    (0b1111111111111000, 0b0100111001011000, "Unlk"),
    (0b1111111110111000, 0b0100100010000000, "Ext"),
    (0b1111111111110000, 0b0100111001000000, "Trap"),
    (0b1111111111110000, 0b0100111001100000, "MoveUSP"),
    (0b1111111111000000, 0b0000100000000000, "Btst"),
    (0b1111111111000000, 0b0000100001000000, "Bchg"),
    (0b1111111111000000, 0b0000100010000000, "Bclr"),
    (0b1111111111000000, 0b0000100011000000, "Bset"),
    (0b1111111111000000, 0b0100000011000000, "MoveFromSR"),
    (0b1111111111000000, 0b0100010011000000, "MoveToCCR"),
    (0b1111111111000000, 0b0100011011000000, "MoveToSR"),
    (0b1111111111000000, 0b0100100000000000, "Nbcd"),
    (0b1111111111000000, 0b0100100001000000, "Pea"),
    (0b1111111111000000, 0b0100101011000000, "Tas"),
    (0b1111111111000000, 0b0100111010000000, "Jsr"),
    (0b1111111111000000, 0b0100111011000000, "Jmp"),
    (0b1111000011111000, 0b0101000011001000, "Dbcc"),
    (0b1111000111110000, 0b1000000100000000, "Sbcd"),
    (0b1111000111110000, 0b1100000100000000, "Abcd"),
    (0b1111111011000000, 0b1110000011000000, "Asd"),
    (0b1111111011000000, 0b1110001011000000, "Lsd"),
    (0b1111111011000000, 0b1110010011000000, "Roxd"),
    (0b1111111011000000, 0b1110011011000000, "Rod"),
    (0b1111111100000000, 0b0000000000000000, "Ori"),
    (0b1111111100000000, 0b0000001000000000, "Andi"),
    (0b1111111100000000, 0b0000010000000000, "Subi"),
    (0b1111111100000000, 0b0000011000000000, "Addi"),
    (0b1111111100000000, 0b0000101000000000, "Eori"),
    (0b1111111100000000, 0b0000110000000000, "Cmpi"),
    (0b1111000100111000, 0b0000000100001000, "Movep"),
    (0b1111111100000000, 0b0100000000000000, "Negx"),
    (0b1111111100000000, 0b0100001000000000, "Clr"),
    (0b1111111100000000, 0b0100010000000000, "Neg"),
    (0b1111111100000000, 0b0100011000000000, "Not"),
    (0b1111111100000000, 0b0100101000000000, "Tst"),
    (0b1111101110000000, 0b0100100010000000, "Movem"),
    (0b1111111100000000, 0b0110000000000000, "Bra"),
    (0b1111111100000000, 0b0110000100000000, "Bsr"),
    (0b1111000011000000, 0b1011000011000000, "Cmpa"),
    (0b1111000111000000, 0b0000000100000000, "Btst"),
    (0b1111000111000000, 0b0000000101000000, "Bchg"),
    (0b1111000111000000, 0b0000000110000000, "Bclr"),
    (0b1111000111000000, 0b0000000111000000, "Bset"),
    (0b1111000111000000, 0b0011000001000000, "Moveaw"),
    (0b1111000111000000, 0b0010000001000000, "Moveal"),
    (0b1111000111000000, 0b0100000111000000, "Lea"),
    (0b1111000111000000, 0b0100000110000000, "Chk"),
    (0b1111000111000000, 0b1000000011000000, "Divu"),
    (0b1111000111000000, 0b1000000111000000, "Divs"),
    (0b1111000011000000, 0b1001000011000000, "Suba"),
    (0b1111000111000000, 0b1100000011000000, "Mulu"),
    (0b1111000111000000, 0b1100000111000000, "Muls"),
    (0b1111000100110000, 0b1100000100000000, "Exg"),
    (0b1111000000000000, 0b1100000000000000, "And"),
    (0b1111000011000000, 0b1101000011000000, "Adda"),
    (0b1111000100110000, 0b1101000100000000, "Addx"),
    (0b1111000011000000, 0b0101000011000000, "Scc"),
    (0b1111000100110000, 0b1001000100000000, "Subx"),
    (0b1111000100111000, 0b1011000100001000, "Cmpm"),
    (0b1111000000011000, 0b1110000000000000, "Asd"),
    (0b1111000000011000, 0b1110000000001000, "Lsd"),
    (0b1111000000011000, 0b1110000000010000, "Roxd"),
    (0b1111000000011000, 0b1110000000011000, "Rod"),
    (0b1111000100000000, 0b0101000000000000, "Addq"),
    (0b1111000100000000, 0b0101000100000000, "Subq"),
    (0b1111000100000000, 0b0111000000000000, "Moveq"),
    (0b1111000100000000, 0b1011000100000000, "Eor"),
    (0b1111000100000000, 0b1011000000000000, "Cmp"),
    (0b1111000000000000, 0b0011000000000000, "Movew"),
    (0b1111000000000000, 0b0010000000000000, "Movel"),
    (0b1111000000000000, 0b0001000000000000, "Moveb"),
    (0b1111000000000000, 0b0110000000000000, "Bcc"),
    (0b1111000000000000, 0b1000000000000000, "Or"),
    (0b1111000000000000, 0b1001000000000000, "Sub"),
    (0b1111000000000000, 0b1101000000000000, "Add"),
]


def check_opcode_table():
    # Sort by mask
    # opcode_table = sorted(opcode_table, key=lambda opcode: bin(opcode[0]).count("1"), reverse=True)

    # Mask check
    for opcode in opcode_table:
        if opcode[1] & opcode[0] != opcode[1]:
            print("MASK ERROR: %s" % opcode[2])
            return False
    return True
    
def gen_py_mask():
    for opcode in opcode_table:
        print("(0b{0:016b}, 0b{1:016b}, \"{2}\"),".format(opcode[0], opcode[1], opcode[2][0].upper() + opcode[2][1:]))

def gen_mask():
    check_opcode_table()
    print("std::vector<MaskTableElement> opcode_mask_table = {")
    for opcode in opcode_table:
        line = "{{0x{0:04X}, 0x{1:04X}, INSTRUCTION::{2}::create}},".format(*opcode)
        comment = "//(0b{0:016b}, 0b{1:016b}, \"{2}\")".format(*opcode)
        print("    {0:50s} {1}".format(line, comment))
    print("};")

def gen_opcode():
    check_opcode_table()
    print("std::vector<Instruction> opcode_table = {")
    for i in range(0x10000):
        op_name = "illegal"
        for opcode in opcode_table:
            if i & opcode[0] == opcode[1]:
                if op_name is None:
                    op_name = opcode[2]
                    op_name = "illegal"
                    break
        print("    INSTRUCTION::%s," % op_name);
    print("};")

def usage():
    print("usage: opcode_table_generator.py [opcode|pymask|mask]")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage()
        exit()

    if(sys.argv[1].lower() == "opcode"):
        gen_opcode()
    elif(sys.argv[1].lower() == "pymask"):
        gen_py_mask()
    elif(sys.argv[1].lower() == "mask"):
        gen_mask()
    else:
        usage()
    